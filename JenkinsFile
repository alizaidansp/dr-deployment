pipeline {
    agent any
    environment {
        GITHUB_REPO_URL      = 'https://github.com/alizaidansp/dr-deployment.git'
        GITHUB_APP_REPO      = 'https://github.com/alizaidansp/waf-lamp-repo.git'
        BRANCH               = 'main'
        CREDENTIALS_ID       = 'JENKINS_PAT'
        AWS_CREDENTIALS_ID   = 'MY_AWS_ACCESS_KEY'
        S3_BUCKET_NAME       = 'ali-amalitech-state-bucket'
        APP_REPO_DIR         = 'waf-lamp-repo'   // App code dir
        DEPLOYMENT_REPO_DIR  = 'dr-deployment'   // Deployment IaC dir
    }

    stages {
        stage('Clone Deployment Repository') {
            steps {
                script {
                    echo "Cloning deployment repo: ${GITHUB_REPO_URL}"
                    git branch: "${BRANCH}",
                        credentialsId: "${CREDENTIALS_ID}",
                        sh "ls -la"
                        url: "${GITHUB_REPO_URL}"
                    echo 'Deployment repository cloned successfully.'
                }
            }
        }

        stage('Clone Application Repository') {
            steps {
                script {
                    echo "Cloning application repo: ${GITHUB_APP_REPO}"
                    sh "rm -rf ${APP_REPO_DIR}" // Clean old app dir if exists
                    dir('..') {   // Clone at one level above
                        git branch: "${BRANCH}",
                            credentialsId: "${CREDENTIALS_ID}",
                            url: "${GITHUB_APP_REPO}",
                            changelog: false,
                            poll: false
                    }
                    echo "Application repository cloned successfully."
                    sh "ls -la ../" // Debug workspace structure
                }
            }
        }

        stage('Inject .env File into App Repo') {
            steps {
                withCredentials([file(credentialsId: 'ENV_SECRET_KsTU', variable: 'ENV_FILE')]) {
                    dir("../${APP_REPO_DIR}") {
                        sh '''
                            if [ -e .env ]; then rm .env; fi
                            cp "$ENV_FILE" .env
                        '''
                    }
                    echo '.env file injected into application repo successfully.'
                }
            }
        }

        stage('Set up Terraform State Backend') {
            steps {
                withCredentials([aws(credentialsId: "${AWS_CREDENTIALS_ID}")]) {
                    script {
                        def bucketExists = sh(
                            script: "aws s3api head-bucket --bucket ${S3_BUCKET_NAME} > /dev/null 2>&1; echo \$?",
                            returnStdout: true
                        ).trim()

                        if (bucketExists == '0') {
                            echo "S3 Bucket '${S3_BUCKET_NAME}' exists. Skipping Terraform backend setup."
                        } else {
                            echo "S3 Bucket '${S3_BUCKET_NAME}' does not exist. Running Terraform backend setup."
                            dir("${DEPLOYMENT_REPO_DIR}/state-bootstrap") {
                                sh 'terraform init'
                                sh 'terraform apply -auto-approve'
                            }
                            echo 'Terraform state backend created successfully.'
                        }
                    }
                }
            }
        }

        stage('Inject terraform.tfvars') {
            steps {
                withCredentials([file(
                    credentialsId: 'terraform-kstu-vars',
                    variable: 'TFVARS_FILE'
                )]) {
                    dir("${DEPLOYMENT_REPO_DIR}") {
                        sh "cp -f \"${TFVARS_FILE}\" terraform.tfvars"
                        echo 'terraform.tfvars injected.'
                    }
                }
            }
        }

        stage('Terraform Init') {
            steps {
                withCredentials([aws(credentialsId: "${AWS_CREDENTIALS_ID}")]) {
                    dir("${DEPLOYMENT_REPO_DIR}") {
                        sh 'terraform init'
                    }
                }
                echo 'Terraform initialized successfully.'
            }
        }

        stage('Terraform Plan') {
            steps {
                withCredentials([aws(credentialsId: "${AWS_CREDENTIALS_ID}")]) {
                    dir("${DEPLOYMENT_REPO_DIR}") {
                        sh 'terraform plan -out=tfplan'
                    }
                }
                echo 'Terraform plan generated successfully.'
            }
        }

        stage('Infracost Cost Estimation') {
            steps {
                withCredentials([aws(credentialsId: "${AWS_CREDENTIALS_ID}")]) {
                    dir("${DEPLOYMENT_REPO_DIR}") {
                        sh 'infracost breakdown --path . --format json --out-file infracost.json'
                        sh 'infracost output --path infracost.json --format table'
                    }
                }
                echo 'Cost estimation completed.'
            }
        }

        stage('Approval') {
            steps {
                input message: 'Review Terraform Plan and Infracost. Proceed with apply?', ok: 'Apply'
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([aws(credentialsId: "${AWS_CREDENTIALS_ID}")]) {
                    dir("${DEPLOYMENT_REPO_DIR}") {
                        sh 'terraform apply -auto-approve tfplan'
                    }
                }
                echo 'Infrastructure deployed successfully.'
            }
        }
    }

    post {
        success {
            echo '✅ Pipeline completed successfully! Infrastructure deployed to AWS.'
        }
        failure {
            echo '❌ Pipeline failed! Check the error logs for investigation.'
        }
    }
}
