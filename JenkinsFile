pipeline {
    agent any
    environment {
        // Environment Variables
        GITHUB_REPO_URL      = 'https://github.com/alizaidansp/dr-deployment.git'
        BRANCH               = 'main'
        CREDENTIALS_ID       = 'JENKINS_PAT'
        AWS_CREDENTIALS_ID   = 'MY_AWS_ACCESS_KEY'
        S3_BUCKET_NAME       = 'ali-amalitech-state-bucket'
        GITHUB_APP_REPO      = 'https://github.com/alizaidansp/waf-lamp-repo.git'
        APP_REPO_BRANCH      = 'main'
        APP_TEMP_DIR         = 'waf-lamp-repo-tmp'
        EXPECTED_APP_DIR     = 'ask-kstu-backend-v3'
    }

    stages {
        // Stage 1: Clone the Deployment Repository
        stage('Clone Repository') {
            steps {
                script {
                    echo "Cloning deployment repo from ${GITHUB_REPO_URL} on branch ${BRANCH}"
                    git branch: "${BRANCH}",
                        credentialsId: "${CREDENTIALS_ID}",
                        url: "${GITHUB_REPO_URL}"
                    echo 'Deployment repository cloned successfully.'
                }
            }
        }

        // Stage 1.5: Clone Application Repository
        // Stage: Clone Application Repository and Inject .env File
stage('Clone Application Repository') {
    steps {
        script {
            echo "Cloning application repo from ${GITHUB_APP_REPO} on branch ${APP_REPO_BRANCH}"
            dir("${APP_TEMP_DIR}") {
                git branch: "${APP_REPO_BRANCH}",
                    credentialsId: "${CREDENTIALS_ID}",
                    url: "${GITHUB_APP_REPO}"
                echo 'Application repository cloned successfully.'
            }
        }
    }
}

stage('Inject .env File') {
    steps {
        withCredentials([file(credentialsId: 'ENV_SECRET_KsTU', variable: 'ENV_FILE')]) {
            script {
                // Navigate to the application directory
                dir("${APP_TEMP_DIR}/${EXPECTED_APP_DIR}") {
                    // Remove the existing .env file if it exists
                    sh "if [ -e .env ]; then rm -f .env; fi"
                    // Copy the secret file to .env in the application directory
                    sh "cp -f \"${ENV_FILE}\" .env"
                }
                echo '.env file injected successfully into application directory.'
            }
        }
    }
}

        // Stage 2: Set Up Terraform State Backend
        stage('Set up State Backend') {
            steps {
                script {
                    withCredentials([aws(credentialsId: "${AWS_CREDENTIALS_ID}")]) {
                        def bucketExists = sh(
                            script: "aws s3api head-bucket --bucket ${S3_BUCKET_NAME} > /dev/null 2>&1; echo \$?",
                            returnStdout: true
                        ).trim()

                        if (bucketExists == '0') {
                            echo "Bucket ${S3_BUCKET_NAME} exists. Skipping Terraform setup."
                        } else {
                            echo "Bucket ${S3_BUCKET_NAME} does not exist. Running Terraform setup."
                            dir('state-bootstrap') {
                                sh 'terraform init'
                                sh 'terraform apply -auto-approve'
                            }
                            echo 'Terraform state backend set up successfully.'
                        }
                    }
                }
            }
        }

        // Stage 3: Inject terraform.tfvars
        stage('Inject tfvars') {
            steps {
                withCredentials([file(
                    credentialsId: 'terraform-kstu-vars',
                    variable: 'TFVARS_FILE'
                )]) {
                    sh "cp -f \"${TFVARS_FILE}\" ./terraform.tfvars"
                    echo 'terraform.tfvars injected.'
                }
            }
        }

        // Stage 6: Terraform Init
        stage('Terraform Init') {
            steps {
                withCredentials([aws(credentialsId: "${AWS_CREDENTIALS_ID}")]) {
                    sh 'terraform init'
                }
                echo 'Terraform initialized successfully.'
            }
        }

        // Stage 7: Terraform Plan
        stage('Terraform Plan') {
            steps {
                withCredentials([aws(credentialsId: "${AWS_CREDENTIALS_ID}")]) {
                    sh "terraform plan -out=tfplan -var='app_dir=${WORKSPACE}/${APP_TEMP_DIR}/${EXPECTED_APP_DIR}'"
                }
                echo 'Terraform plan generated successfully.'
            }
        }

        // Stage 8: Infracost Cost Estimation
        stage('Infracost Cost Estimation') {
            steps {
                withCredentials([aws(credentialsId: "${AWS_CREDENTIALS_ID}")]) {
                    sh 'infracost breakdown --path . --format json --out-file infracost.json'
                    sh 'infracost output --path infracost.json --format table'
                }
                echo 'Cost estimation completed.'
            }
        }

        // Stage 9: Manual Approval
        stage('Approval') {
            steps {
                input message: 'Review the Terraform plan and cost estimation. Proceed with apply?', ok: 'Apply'
            }
        }

        // Stage 10: Terraform Apply
        stage('Terraform Apply') {
            steps {
                withCredentials([aws(credentialsId: "${AWS_CREDENTIALS_ID}")]) {
                    sh "terraform apply -auto-approve -var='app_dir=${WORKSPACE}/${APP_TEMP_DIR}/${EXPECTED_APP_DIR}' tfplan"
                }
                echo 'Infrastructure deployed successfully.'
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully! Infrastructure deployed to AWS.'
        }
        failure {
            echo 'Pipeline failed! Check logs for errors.'
        }
    }
}